<!DOCTYPE html> 
<html> 
<head> 
	<meta charset=utf-8> 
	<title>three.js app</title> 
	<style> 
		body { margin: 0; overflow-y: hidden; } 
		canvas { width: 100%; height: 100% } 
		#info {
			position: absolute;
			top: 10px;
			width: 100%;
			text-align: center;
			z-index: 100;
			display:block;
		}
	</style> 
</head> 
<body> 
<script src="js/three.min.js"></script> 
<!-- 
Buffer Geometry 
BufferGeometries store information (such as vertex positions, face indices, normals, colors, UVs, and any custom attributes) in buffers - that is, typed arrays. This makes them generally faster than standard Geometries, at the cost of being somewhat harder to work with.
-->
<script>
var renderer, scene, camera, line;
var MAX_POINTS = 200;
var drawCount;

init ();
animate ();

function init(){
// info
	var info = document.createElement( 'div' );
	info.style.position = 'absolute';
	info.style.top = '30px';
	info.style.width = '100%';
	info.style.textAlign = 'center';
	info.style.color = '#fff';
	info.style.fontWeight = 'bold';
	info.style.backgroundColor = 'rgba(33,33,33,0.75)';
	info.style.zIndex = '5';
	info.style.fontFamily = 'Monospace';
	info.innerHTML = "three.js animated line using BufferGeometry";
	document.body.appendChild( info );

// renderer	
	renderer = new THREE.WebGLRenderer();
	renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.body.appendChild( renderer.domElement );

// scene
	scene = new THREE.Scene();

// camera
	camera = new THREE.PerspectiveCamera( 11, window.innerWidth / window.innerHeight, 1, 10000 );
	camera.position.set( 0, 0, 1000 );

// geometry
	var geometry = new THREE.BufferGeometry();

// attributes
	var positions = new Float32Array( MAX_POINTS * 3 ); // 3 vertices per point
	geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

// drawcalls
	drawCount = 2; // draw the first 2 points, only
	geometry.setDrawRange( 0, drawCount );

// material
	var material = new THREE.LineBasicMaterial( { color: 0xff000033, linewidth: 7 } );

// line
	line = new THREE.Line( geometry,  material );
	scene.add( line );

// update positions
	updatePositions();
}

// update positions
function updatePositions() {
	var positions = line.geometry.attributes.position.array;
	var x = y = z = index = 0;
	for ( var i = 0, l = MAX_POINTS; i < l; i ++ ) {
		positions[ index ++ ] = x;
		positions[ index ++ ] = y;
		positions[ index ++ ] = z;

		x += ( Math.random() - 0.5 ) * 22;
		y += ( Math.random() - 0.5 ) * 11;
		z += ( Math.random() - 0.5 ) * 10;
	}
}

// render
function render() {
	renderer.render( scene, camera );
}

// animate
function animate() {
	requestAnimationFrame( animate );
	drawCount = ( drawCount + 1 ) % MAX_POINTS;
	line.geometry.setDrawRange( 0, drawCount );

// periodically, generate new data
	if ( drawCount === 0 ) {
		updatePositions();
		line.geometry.attributes.position.needsUpdate = true; // required after the first render
		line.material.color.setHSL( (Math.random() / Math.random()), (Math.random() * 10) , 0.75 );
	}
	render();
}




/*
var camera, scene, renderer;
var geometry, material, mesh, cube;

init();
animate();

function init() {
	camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.1, 1000 );
	camera.position.z = 3.5;
	scene = new THREE.Scene();

	geometryMesh = new THREE.BoxGeometry( 1, 1, 1 );
	geometryCube = new THREE.BoxGeometry( 0.85, 0.85, 0.85 );
	materialMesh = new THREE.MeshNormalMaterial();
	materialCube = new THREE.MeshBasicMaterial( { color:0x2f2a2a });
	mesh = new THREE.Mesh( geometryMesh, materialMesh );
	cube = new THREE.Mesh( geometryCube, materialCube ); 
	scene.add( mesh );
	scene.add( cube );
	
// False would mean the cube object doesn't update. 
// The updateMatrix is how you manually update the position of the cube
	cube.matrixAutoUpdate = true;
	cube.updateMatrix();	

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.body.appendChild( renderer.domElement );
}

function animate() {
	requestAnimationFrame( animate );
	mesh.rotation.x += 0.001;
	mesh.rotation.y += 0.002;
	mesh.rotation.z += 0.003;
	cube.rotation.x += ( Math.random() / -33 );
	cube.rotation.y += ( Math.random() / 33 );
	cube.rotation.z += ( Math.random() / 33 );
	renderer.render( scene, camera );

}
*/


</script> 










</body> 
</html>